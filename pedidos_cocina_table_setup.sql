-- ============================================
-- FASE 1: Crear tabla pedidos_cocina
-- Coherente con la estructura de la tabla 'pedidos'
-- ============================================

-- Crear la tabla pedidos_cocina (estructura simplificada y enfocada en cocina)
CREATE TABLE pedidos_cocina (
  -- Identificación
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  
  -- Referencias
  usuario_id UUID DEFAULT auth.uid() NOT NULL,
  cliente_id UUID,
  
  -- Fecha
  fecha_cl DATE NOT NULL,
  
  -- Información del pedido
  mesa NUMERIC NOT NULL,
  producto TEXT NOT NULL,
  unidad TEXT NOT NULL,
  cantidad NUMERIC NOT NULL,
  
  -- Control de tiempos (zona horaria Santiago, Chile)
  hora_inicio_pedido TIMESTAMP WITH TIME ZONE DEFAULT (NOW() AT TIME ZONE 'America/Santiago') NOT NULL,
  hora_termino TIMESTAMP WITH TIME ZONE,
  
  -- Estado del pedido en cocina
  estado TEXT DEFAULT 'pendiente' NOT NULL 
    CHECK (estado IN ('pendiente', 'terminado'))
);

-- ============================================
-- Crear índices para optimizar consultas
-- ============================================

-- Índice por usuario (más importante)
CREATE INDEX idx_pedidos_cocina_usuario ON pedidos_cocina(usuario_id);

-- Índice por estado (para filtrar pendientes/terminados)
CREATE INDEX idx_pedidos_cocina_estado ON pedidos_cocina(estado);

-- Índice por hora de inicio (para ordenar cronológicamente)
CREATE INDEX idx_pedidos_cocina_hora_inicio ON pedidos_cocina(hora_inicio_pedido DESC);

-- Índice por mesa (para agrupar pedidos de la misma mesa)
CREATE INDEX idx_pedidos_cocina_mesa ON pedidos_cocina(mesa);

-- Índice compuesto: usuario + estado (consulta más común)
CREATE INDEX idx_pedidos_cocina_usuario_estado ON pedidos_cocina(usuario_id, estado);

-- ============================================
-- Habilitar Row Level Security (RLS)
-- ============================================

ALTER TABLE pedidos_cocina ENABLE ROW LEVEL SECURITY;

-- ============================================
-- Crear políticas RLS
-- ============================================

-- Política: Los usuarios solo pueden VER sus propios pedidos
CREATE POLICY "usuarios_pueden_ver_sus_pedidos_cocina" 
ON pedidos_cocina FOR SELECT 
USING (auth.uid() = usuario_id);

-- Política: Los usuarios solo pueden INSERTAR sus propios pedidos
CREATE POLICY "usuarios_pueden_insertar_sus_pedidos_cocina" 
ON pedidos_cocina FOR INSERT 
WITH CHECK (auth.uid() = usuario_id);

-- Política: Los usuarios solo pueden ACTUALIZAR sus propios pedidos
CREATE POLICY "usuarios_pueden_actualizar_sus_pedidos_cocina" 
ON pedidos_cocina FOR UPDATE 
USING (auth.uid() = usuario_id);

-- Política: Los usuarios solo pueden ELIMINAR sus propios pedidos
CREATE POLICY "usuarios_pueden_eliminar_sus_pedidos_cocina" 
ON pedidos_cocina FOR DELETE 
USING (auth.uid() = usuario_id);

-- ============================================
-- Habilitar Realtime (Tiempo Real)
-- ============================================

-- Agregar la tabla a la publicación de Realtime
ALTER PUBLICATION supabase_realtime ADD TABLE pedidos_cocina;

-- ============================================
-- VERIFICACIÓN: Consultar estructura creada
-- ============================================

SELECT 
    column_name,
    data_type,
    column_default,
    is_nullable
FROM information_schema.columns 
WHERE table_name = 'pedidos_cocina'
ORDER BY ordinal_position;

